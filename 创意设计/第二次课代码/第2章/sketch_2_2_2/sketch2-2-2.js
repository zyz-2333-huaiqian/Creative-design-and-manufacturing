// function setup() {
//   console.log(1 + 1)
//   console.log(7 - 4)
//   console.log(3 * 2)
//   console.log(18 / 2)
// }
// function draw() {
// }



/*JS知识tips
1.JS支持以下数学运算：

  加法 +,
  减法 -,
  乘法 *,
  除法 /,
  取余 %,
  求幂 **.
  前四个都很简单，而 % 和 ** 则需要说一说。

  取余 %
  取余运算符是 %，尽管它看起来很像百分数，但实际并无关联。
  a % b 的结果是 a 整除 b 的 余数)。


  求幂 **
  求幂运算 a ** b 将 a 提升至 a 的 b 次幂。

  在数学中我们将其表示为 a的b次方。

2.运算符优先级

  优先级	名称	符号
  …	…	…
  15	一元加号  	+
  15	一元负号   	-
  14	求幂      	**
  13	乘号       	*
  13	除号	      /
  12	加号      	+
  12	减号	      -
  …	…	…
  2	赋值符	      =

3.用二元运算符 + 连接字符串
  alert(2 + 2 + '1' ); // "41"，不是 "221"
  alert('1' + 2 + 2); // "122"，不是 "14"
  注意：只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串。

  其他算术运算符只对数字起作用，并且总是将其运算元转换为数字。
  下面是减法和除法运算的示例：
  alert( 6 - '2' ); // 4，将 '2' 转换为数字
  alert( '6' / '2' ); // 3，将两个运算元都转换为数字

4.数字转化，一元运算符 +
  一元运算符加号，或者说，加号 + 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 + 则会将其转化为数字。
  它的效果和 Number(...) 相同，但是更加简短。
  let apples = "2";
  let oranges = "3";
   // 在二元运算符加号起作用之前，所有的值都被转化为了数字
  alert( +apples + +oranges ); // 5
  // 更长的写法
  // alert( Number(apples) + Number(oranges) ); // 5
*/